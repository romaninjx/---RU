def select_item_in_menu() -> int:
    """Функция проверяет корректность ввода для перемещения по интерфейсу.

    Сначала проверяется наличия цифры в ведённой пользователем строке,
    если она есть то возвращаем эту цифру"""

    element = input('Укажи цифру чтобы перемещаться по интерфейсу: ')
    if element.isdigit():   # если цифра есть, то возвращаем её
        element = int(element)
        return element
    else:
        print('Недопустимый символ, либо не был сделан выбор! Для перемещения по интерфейсу используйте только цифры!')
        return select_item_in_menu()


def put_cross():
    """Функция ставит крестик по заданным ей координатам

    Сначала выводится поле, после задаются координаты и проверяются на наличие цифр в них
    если цифры есть то проверяются на диапазон игрового поля (если введётся 22, когда поле 3х3
    то функция попросит вести координаты заново), если координаты соответствуют размеру игрового поля,
    то проверяется ячейка в которую будет помещён крестик, если клетка свободна то ставим крестик,
    иначе вводим координаты заново"""

    display_the_field()     # показываем поле игрокам
    print("ходят крестики!")

    line = input("Введите номер строки(значения слева от поля) от 1 до 3: ")
    column = input("Введите номер столбца(значения сверху от поля) от 1 до 3: ")
    if all([line.isdigit(), column.isdigit()]):     # проверка на цифры в координатах
        line = int(line)
        column = int(column)

        if all([4 > line > 0, 4 > column > 0]):   # проверка на числа которые входят в диапазон игрового поля

            # проверка на свободную клетку в которую будет вставлен крестик
            if (playing_field[line-1][column-1] == "o") or (playing_field[line-1][column-1] == "x"):
                print('Извините, но на указанных координатах клетка уже занята! Укажите новые координаты.')

                put_cross()     # если клетка занята, то вводим координаты повторно
            else:

                playing_field[line-1].pop(column-1)     # удаляем "-" на поле по координатам заданным
                playing_field[line-1].insert(column-1, "x")     # ставим крестик по заданным координатам
        else:
            print('Введённые вами координаты строки или столбца - выходят за пределы игрового поля')
            print('Пожалуйста вводите координаты строк и столбцов в диапазоне от 1 до 3 включительно.')
            put_cross()     # вводим координаты заново
    else:
        print("Введены некорректные данные! При вводе координатор избегайте пробелов и букв")
        put_cross()     # вводим координаты заново


def put_zero():
    """Функция ставит нолик по заданным ей координатам

        Сначала выводится поле, после задаются координаты и проверяются на наличие цифр в них
        если цифры есть то проверяются на диапазон игрового поля (если введётся 22, когда поле 3х3
        то функция попросит вести координаты заново), если координаты соответствуют размеру игрового поля,
        то проверяется ячейка в которую будет помещён нолик, если клетка свободна то ставим нолик,
        иначе вводим координаты заново"""

    display_the_field()     # показываем поле игрокам
    print("ходят Нолики!")

    line = input("Введите номер строки(значения слева от поля) от 1 до 3: ")
    column = input("Введите номер столбца(значения сверху от поля) от 1 до 3: ")
    if all([line.isdigit(), column.isdigit()]):     # проверка на цифры в координатах
        line = int(line)
        column = int(column)

        if all([4 > line > 0, 4 > column > 0]):   # проверка на числа которые входят в диапазон игрового поля

            # проверка на свободную клетку в которую будет вставлен символ
            if (playing_field[line-1][column-1] == "o") or (playing_field[line-1][column-1] == "x"):
                print('Извините, но на указанных координатах клетка уже занята! Укажите новые координаты.')

                put_zero()     # если клетка занята, то вводим координаты повторно
            else:

                playing_field[line - 1].pop(column - 1)     # удаляем "-" на поле по координатам заданным
                playing_field[line - 1].insert(column - 1, "o")     # ставим нолик по заданным координатам
        else:
            print('Введённые вами координаты строки или столбца - выходят за пределы игрового поля')
            print('Пожалуйста вводите координаты строк и столбцов в диапазоне от 1 до 3 включительно.')
            put_zero()     # вводим координаты заново
    else:
        print("Введены некорректные данные! При вводе координатов избегайте пробелов и букв")
        put_zero()     # вводим координаты заново


def display_the_field():
    """Функция выводит игровое.
    Сначала выводится нумерация столбцов, после нумерация строк и в конце само игровое поле"""

    print(" ", 1, 2, 3)     # выводим нумерацию столбцов
    for column in range(len(playing_field)):
        print(column+1, *playing_field[column])     # выводим нумерацию строк и само игровое поле
    print()


def checking_line_win():
    """Функция проверяет по горизонтали: выйграл ли кто-нибудь?

    Создаются 2 счётчика, и проверяется каждая ячейка (проверяем по горизонтали), если в ячейке крестик,
     то добавляем к соответствующему счётчику +1, если нолик то +1 к соответствующему ему счётчику.
     Если в строчке, которую мы проверяем, будет 3 крестика или 3 нолика, то объявляется победитель,
     если ни один счётчик не достигает 3, то счётчики сбрасываются до 0 и проверяется следующая строка.
     Если в этой проверке (проверяется победитель, если победа осуществилось по одной из горизонтали)
     был объявлен победитель, то мы даём знать об этом функции 'checking_win'"""

    for line in range(3):   # строка
        number_matches_cross = 0   # счётчик для крестиков
        number_matches_zero = 0    # счётчик для ноликов
        for column in range(3):    # столбец

            if playing_field[line][column] == "x":      # проверка каждого "х" в строке
                number_matches_cross += 1   # если "x", то добавляем его в соответствующий счётчик

            elif playing_field[line][column] == "o":    # проверка каждого "o" в строке
                number_matches_zero += 1   # если "o", то добавляем его в соответствующий счётчик

            if number_matches_cross == 3:    # если в счётчике 3 символа - победа
                display_the_field()     # выводим игровое поле
                print('Выйграли Крестики!!!')
                return True     # если кто-то выйграл, то даём об этом знать функции "checking_win"

            elif number_matches_zero == 3:
                display_the_field()     # выводим игровое поле
                print('Выйграли Нолики!!!')
                return True     # если кто-то выйграл, то даём об этом знать функции "checking_win"


def checking_column_win():
    """Функция проверяет по вертикали: выйграл ли кто-нибудь?

        Создаются 2 счётчика, и проверяется каждая ячейка (проверяем по горизонтали), если в ячейке крестик,
         то добавляем к соответствующему счётчику +1, если нолик то +1 к соответствующему ему счётчику.
         Если в строчке, которую мы проверяем, будет 3 крестика или 3 нолика, то объявляется победитель,
         если ни один счётчик не достигает 3, то счётчики сбрасываются до 0 и проверяется следующий столбец.
         Если в этой проверке (проверяется победитель, если победа осуществилось по одной из вертикали)
         был объявлен победитель, то мы даём знать об этом функции 'checking_win'"""

    for column in range(3):         # Столбец
        number_matches_cross = 0    # счётчик для крестиков
        number_matches_zero = 0     # счётчик для ноликов
        for line in range(3):       # строка

            if playing_field[line][column] == 'x':      # проверка каждого "х" в строке
                number_matches_cross += 1   # если "x", то добавляем его в соответствующий счётчик

            elif playing_field[line][column] == 'o':    # проверка каждого "o" в строке
                number_matches_zero += 1   # если "o", то добавляем его в соответствующий счётчик

            if number_matches_cross == 3:  # если в счётчике 3 символа - победа
                display_the_field()     # выводим игровое поле
                print('Выйграли Крестики!!!')
                return True     # если кто-то выйграл, то даём об этом знать функции "checking_win"

            elif number_matches_zero == 3:
                display_the_field()     # выводим игровое поле
                print('Выйграли Нолики!!!')
                return True     # если кто-то выйграл, то даём об этом знать функции "checking_win"


def checking_diagonal_win():
    """Функция проверяет по диагонали: выйграл ли кто-нибудь?

    Создаём строку и добавляем в неё символы на ходящиеся на поле по диагонали.
    Если все символы были крестиками или ноликами, то объявляем победителя, если его нет, то очищаем строку
    и аналогичным образом проверяем символы по второй диагонали. Если во второй диагонали был победитель,
    то объявляем его.
    Если в этой проверке (проверяется победитель, если победа осуществилось по одной из диагоналей)
    был объявлен победитель, то мы даём знать об этом функции 'checking_win'"""

    diagonal = ""   # строка нужна, чтобы определить сколько в ней крестиков или ноликов
    for index in range(3):
        # в строку добавляем в строку символы находящиеся по диагонали на поле(левый верхний угол на правый нижний угол)
        diagonal += playing_field[index][index]

    if diagonal.count("x") == 3:    # если в строке 3 крестика
        display_the_field()         # выводим игровое поле
        print("Выйграли Крестики")
        return True     # если кто-то выйграл, то даём об этом знать функции "checking_win"

    elif diagonal.count('o') == 3:    # если в строке 3 крестика
        display_the_field()           # выводим игровое поле
        print("Выйграли Нолики!!!")
        return True     # если кто-то выйграл, то даём об этом знать функции "checking_win"

        # если победителя не нашлось проверяем следующую диагональ
    diagonal = ""   # очищаем строку
    for index in range(3):
        # в строку добавляем в строку символы находящиеся по диагонали на поле(правый верхний угол на левый нижний угол)
        diagonal += playing_field[2-index][index]

    if diagonal.count("x") == 3:    # если в строке 3 крестика
        display_the_field()         # выводим игровое поле
        print("Выйграли Крестики")
        return True     # если кто-то выйграл, то даём об этом знать функции "checking_win"

    elif diagonal.count('o') == 3:  # если в строке 3 нолика
        display_the_field()         # выводим игровое поле
        print("Выйграли Нолики!!!")
        return True     # если кто-то выйграл, то даём об этом знать функции "checking_win"


def checking_win() -> bool:
    """Функция проверяет наличие победителя в игре.

    В эту функцию передаются результаты проверок:
    1. 'checking_diagonal_win' (по диагонали);
    2. 'checking_column_win'(по вертикали);
    3. 'checking_line_win'(по горизонтали).

    Если хотя бы одна проверка нашла победителя, то мы возвращаем True, иначе False
    Эта функция нужна для того чтобы если победитель не найдётся, то мы могли объявить ничью"""

    return any([checking_diagonal_win(), checking_column_win(), checking_line_win()])


def end_choice() -> bool:
    """Эта функция предлагает нам либо выйти в главное меню либо выйти из программы

    Просим ввести пользователя цифру и если она находится в нужном диапазоне(от 0 да 1) и при этом не содержит букв,
    то мы выводим булевое значение чтобы в дальнейшем либо выйти из программы либо выйти в главное меню"""

    print()
    final_choice_user = input("выйти в меню?  1-да/0-нет\n Введите соответствующую цифру: ")

    if final_choice_user.isdigit():    # проверяем наличие цифр в строке, если есть то преобразуем в int
        final_choice_user = int(final_choice_user)

        if 2 > final_choice_user > -1:   # проверка на нахождение этой цифры в нужном диапазоне

            if final_choice_user == 1:   # если выбрали 1(да), то мы не выходим из программы
                return False

            elif final_choice_user == 0:     # если выбрали 0(нет), то мы выйдем из программы
                return True

        else:
            print()
            print("Нужно вести либо 1 либо 0")
            return end_choice()     # просим ввести цифру повторно если ввели её некорректно
    else:
        print()
        print("Введён некорректный символ или не сделан выбор!")
        return end_choice()     # просим ввести цифру повторно если ввели её некорректно


while True:                                 # ///САМ АЛГОРИТМ ИГРЫ\\\
    print("Крестики - Нолики")
    print(' 1. Новая игра\n 2. Правила игры\n 3. Выход из игры')
    choice = select_item_in_menu()      # просим пользователя выбрать нужный ему пункт в главном меню
    print()

    if choice == 1:     # 1. Новая игра

        # создание пустого игрового поля
        playing_field = [["-" for line in range(3)] for column in range(3)]
        number_empty_cells = 9      # счётчик количества свободных мест на игровом поле
        end = False             # переменная благодаря которой будет осуществляться выход из программы

        print('ИНСТРУКЦИЯ ПО НАВИГАЦИИ В ИГРЕ:')
        print('Крестики и нолики ставятся по координатам, координаты в свою очередь состоят из строк и столбцов')
        print('Диапазоны строк и столбцов составляют от 1 до 3 включительно')

    # процесс игры
        while True:
            put_cross()      # ход крестиков
            number_empty_cells -= 1    # убираем свободное место в счётчике
            if number_empty_cells <= 4:  # как только сделали минимум 5 ходов, начинаем проверки на наличие победителя

                end = checking_win()
                if end:                      # если победитель находится >

                    final_choice = end_choice()
                    if final_choice:            # > то мы даём выбор либо выйти из программы либо выйти в меню
                        break
                    else:
                        break

                elif number_empty_cells == 0:   # если победителя нет, а счётчик мест показывает 0
                    display_the_field()     # то выводим игровое поле и объявляем ничью
                    print("Ничья!!!")
                    final_choice = end_choice()
                    if final_choice:    # и так же в конце игры, предлагаем закрыть игру либо вернуться в меню
                        break
                    else:
                        break

            put_zero()      # ход ноликов
            number_empty_cells -= 1    # убираем свободное место в счётчике
            if number_empty_cells <= 4:  # как только сделали минимум 5 ходов, начинаем проверки на наличие победителя

                end = checking_win()
                if end:                      # если победитель находится >

                    final_choice = end_choice()
                    if final_choice:            # > то мы даём выбор либо выйти из программы либо выйти в меню
                        break
                    else:
                        break

                elif number_empty_cells == 0:   # если победителя нет, а счётчик мест показывает 0
                    display_the_field()     # то выводим игровое поле и объявляем ничью
                    print("Ничья!!!")
                    final_choice = end_choice()
                    if final_choice:    # и так же в конце игры, предлагаем закрыть игру либо вернуться в меню
                        break
                    else:
                        break

        # если мы решили выйти из программы, то мы выходим из неё иначе из-за цикла while мы попадём в главное меню
        if final_choice:
            break

    elif choice == 2:   # 2. Правила игры
        print('Правила игры "Крестики-нолики" 3x3\n 1. Игровое поле: Игра ведется на квадратном поле 3x3 клетки.')
        print(' 2. Игроки: Два игрока участвуют в игре. Один играет "крестиками" (x), другой - "ноликами" (o).')
        print(' 3. Ход игры: Игроки по очереди ставят свои символы ("крестики" или "нолики") на свободные клетки поля.')
        print(' Первый ход делает игрок, играющий "крестиками".')
        print(' 4.Цель игры: Цель игры - выстроить три своих символа в ряд: по горизонтали, вертикали или диагонали.')
        print(' 5.Победа: Игрок, первым выстроивший три своих символа в ряд, выигрывает игру.')
        print(' 6. Ничья: Если все клетки поля заполнены, а ни один из игроков')
        print(' не смог выстроить три своих символа в ряд, игра заканчивается вничью.')
        print()

    elif choice == 3:  # 3. выход из программы
        break

    else:   # если мы выбрали какую другую цифру, то заново просим ввести доступное пользователю цифру
        print("Извините но вы можете только выбрать 1, 2 или 3 пункт. Просто впишите цифру без посторонних символов :)")
        print()
